#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Aug 23 18:43:39 2020

@author: sandesh
"""

#This code determines the longest common consensus sequence between any two strings.
#The basic algorithm is to provide 1 for matches and create a distance matrix with one string in row,
#and another in columns. While backtracking, from the end, if there is a match, append the character and move back diagonally.
#if mismatch, determine if the value was received from left or from top and move accordingly. 
import numpy as np

stringa = "CACAGAGGGATCAGCCCTGGTATTAATCTTGGAGGGTAACGATTTAAGCGAGAAGAGAACCTTAGCTCCTTCTAGAGGCCATGACACCATATGTTTCTCCAAATTGTCGGTAGTAATATCGAACTCCGTCTCGCCTGACACGCGCTTGATAATATTCATGAACTATAACGCCAAGTGGTATGCCTCTATCTTCAACGACTTTTTGTGGGGTCGGAACTATTTATGTCGTAAGTCGGCTACTGCGAGATTCCACTAAAGGCGTCACCCTCCTGCTATCGAGGGTGGACTCTTGTTGTGCCCCCTCACCTCGCTGTATAGTCCAATGGTTCTGGAACAGACCTCGGGACTAAATCTATATAGTGGTGTGAATAATCTTGATGCAATTGACAGTCGTAAGTTCAAATTTTAGTTAGGCACAGTGATACATGGCGGTGAATAAATCTTACGCAGGCTTCTAGGGCTTAACACGGCACAGTAAATGCCCTAAAGTCCAGAGTTGTCGGATTCGAGGACAAGATTACGGCTGGATAATGAGCTTTGTAGAGCCCGTATTCCAGAACGTCTGCCTAAACGTGCGGTCCTAGATCAGGCATCTCTTGGTGTATGTTACTCTCACAGTAATACCATTTTGTGCTTGGCTGCCAGCCAAAGGAGGCAACGGCGGTTATTCTGAAGAGCCAGTGCTACCCAATCTGCGACGCAGGGACCACATTTGGTACAAAAATAGGAATCAGCGTGAGGGGAGGTTTGGCGGCAACGATATCAGTCGGGTACTGATACTATCACTCAGACAGACTAGCCAATATTGCCATTACGTGTTTAGAGCCTTAGTGCCTACGTAATATTAGCAGTCCGCAT"
stringb = "AAACCTTACTAAGGGCTGTATGCAGGCTACATCTACTCCCCTACCCATTGCGACAAGGCCTTCGTCCAAAATCGCTTCGCACCCTCTATACAAGTGGAATTGACGGTTGACAGGCCTATTTCGCACCGCCGCATCCGCCTTACGGTCAGGGCCCTAGCAACCGCAAACCGACACAACCCGGTCTCTGTCGGCACTTAGGCGAGATAGTGTGAACATCATGCTAAAGCATACTACAAGTAAGCGCCCTGCTGCCAAGGGAAGTGGAAAACCAACGGACCGCCCTAGCGGGCCGCTGCCAACACTAATGGTGCCCCGAGACGCGCAGCCCGGGCCGACTATAGTATTGAATAACTAGTACCAACTCTACGCGACGCGAGCATGTCACTCAACCTATCAAGGTTGACCTGAGACTACATATCCCAAGCAGCAGACTCTCAGAGCAGACACCAGGAGATGAGTTTCCGCCCAAGACGAGAAAGATTATTCTGTCGCCGGTTTTACTTACATGCGCCTCATTGAGGTTTAAACAAATCCCTCATAAACGTAGTTGAACATGCTAGGTTATGTCGGGCATAGTATTTCGGCTCACGAGTCAGAACCCTCCGGAGGTGATTACCGTGTGAATATATAAAGGTTGCGGATCAAGAATGATTGGTGTTTGTGCTCCCGAGAGTATGGACGAACGAGGAAAATGCCCTGTCCCATAGTTCAGTAGCGTAGAATTCCTAGGAAGGCGTTATATCGCACCAACCCACAGTGTGGAACTTCAGTACTTCATTTGTCCTTCATTACGAATATACTTAAAAAGGACTAACGCACTCCGCCATGAATATAGTCTCATGGGGGGGCCCAAGAATTCGTAT"
i = len(stringa)
j = len(stringb)

dis_matrix = np.zeros((i+1, j+1))

for m in range(1, i+1):
    for n in range(1, j+1):
        if stringa[m-1] == stringb[n-1]:
            dis_matrix[m][n] = 1+ dis_matrix[m-1][n-1]
        else:
            dis_matrix[m][n] = max(dis_matrix[m][n-1], dis_matrix[m-1][n])
            
LCSno = int(dis_matrix[m][n])
LCS = [""] * LCSno
s = m 
t = n

while s>=0 and t>=0 :
    
    if stringa[s-1]==stringb[t-1]:
        LCS[LCSno -1] = stringa[s-1]
        s = s-1
        t = t-1
        LCSno = LCSno-1
    
    elif dis_matrix[s][t] == dis_matrix[s-1][t]:
        s = s-1

    elif dis_matrix[s][t] == dis_matrix[s][t-1]:
        t = t-1

LCS = ''.join(LCS)
print(LCS)