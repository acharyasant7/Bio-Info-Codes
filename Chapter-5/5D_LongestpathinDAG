#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 17 10:42:26 2020

@author: sandesh
"""

#This code is to determine the longest path in a DAG alongwith the distance. Firstly, read the DAG file
#where the first line determines source, second line sink. And, from the third line, it represents edges, with
#node1 -> node2 : weight, in this way. Thus, create a matrix edges with three values : node1, node2 and weight.

#use networkx library which generates all the possible paths from source to sink, and from all the paths select
#the one with the highest distance. 

import networkx as nx

def read_data(file_name):
    with open(file_name, 'r') as file:
        src = int(file.readline().strip()) #first line as source
        sink = int(file.readline().strip()) #second line as sink
        edges = []
        line = " "
        try:
            while line != '':
                edge, weigth = file.readline().strip().split(":")
                node1, node2 = edge.split("->")
                edges.append((int(node1), int(node2), int(weigth)))
        except ValueError:
            pass

    return src, sink, edges

def calc_dist(graph, path):
    dist = 0
    for i in range(len(path)-1):
        dist += graph[path[i]][path[i+1]]['weight']

    return dist

def find_longest_path(src, sink, graph):
    paths = nx.all_simple_paths(graph, source=src, target=sink)
    longest_path = []
    max_dist = 0
    for path in paths:
        dist = calc_dist(graph, path)
        if dist > max_dist:
            max_dist = dist
            longest_path = path

    return max_dist, longest_path

if __name__ == "__main__":
    src, sink, edges = read_data("5d.txt")
    graph = nx.DiGraph()
    for edge in edges:
        graph.add_edge(edge[0], edge[1], weight=edge[2])

    dist, path = find_longest_path(src, sink, graph)
    print(dist)
    for i in range(len(path)):
        print("->".join([str(path[i])]))



