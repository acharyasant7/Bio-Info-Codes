#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Aug 23 17:58:41 2020

@author: sandesh
"""
#This code
import numpy as np

#This code returns the length of the longest path in a Manhattan Tourist Problem.
#The basic algorithm is to create a distance matrix based on the distance for down-ward or right side
#movement as given in the input. 

def ManhattanTourist(n,m, Down, Right):
    s = np.zeros((n+1, m+1))

    for i in range(1, n+1):
        s[i][0] = s[i-1][0] + Down[i-1][0]
    for j in range(1, m+1):
        s[0][j] = s[0][j-1] + Right[0][j-1]
    
    for i in range(1, m+1):
        for j in range(1, n+1):
            s[i][j] = max(s[i-1][j] + Down[i-1][j], s[i][j-1] + Right[i][j-1])
    return(s[i][j])
    
n = 4
m = 4
print("Enter Down Matrix")
Down = np.zeros((n,m+1))
Right = np.zeros((n+1,m))
for i in range(0, n):
    for j in range(0, m+1):
        Down[i][j] = int(input())

print("Enter Right Matrix")
for i in range(0, n+1):
    for j in range(0, m):
        Right[i][j] = int(input())

print(ManhattanTourist(n, m, Down, Right))