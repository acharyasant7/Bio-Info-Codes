#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Aug 14 19:43:11 2020

@author: sandesh
"""
import math

def Probability_from_matrix(matrix,i,text):
    if text == 'A':
        return matrix[0][i]
    elif text == 'C':
        return matrix[1][i]
    elif text == 'G':
        return matrix[2][i]
    elif text == 'T':
        return matrix[3][i]
        
    

    
def ProfileMatrix(motifs):
    A = []
    G= [] 
    C = [] 
    T = []
    Profile = []
    for i in range(0, len(motifs[0])):
         
        countA, countC, countG, countT = 0,0,0,0
         
        for motif in motifs:
            
            if motif[i] == 'A':
                countA = countA+1
            if motif[i] == 'C':
                countC = countC+1
            if motif[i] == 'G':
                countG = countG+1
            if motif[i] == 'T':
                countT = countT+1
                
        A.append(countA/len(motifs))
        G.append(countG/len(motifs))
        C.append(countC/len(motifs))
        T.append(countT/len(motifs))
     
    Profile.append(A)
    Profile.append(C)
    Profile.append(G)
    Profile.append(T)
    
    return Profile

def ProbableMotif(Dna, k, matrix):
    m = len(Dna) - k +1
    Prob = [0]*m
    for i in range(0,m):
        string = Dna[i:i+k]
        P = 1
        for j in range(0,k):
            s = i + j
            P = P * Probability_from_matrix(matrix, j, string[j])
        Prob[i] = P
    
    for i in range(0,m):
        if Prob[i] == max(Prob):
            return Dna[i:i+k]


def FindConsensus(motifs):
    
    consensus = ""
    for i in range(len(motifs[0])):
        countA, countC, countG, countT = 0, 0, 0, 0
        for motif in motifs:
            if motif[i] == "A":
                countA += 1
            elif motif[i] == "C":
                countC += 1
            elif motif[i] == "G":
                countG += 1
            elif motif[i] == "T":
                countT += 1
        if countA >= max(countC, countG, countT):
            consensus += "A"
        elif countC >= max(countA, countG, countT):
            consensus += "C"
        elif countG >= max(countC, countA, countT):
            consensus += "G"
        elif countT >= max(countC, countG, countA):
            consensus += "T"
    return consensus

def HammingDist(pattern, text):
    count = 0
    for i in range(0, len(text)):
        if pattern[i] != text[i]:
            count = count +1
    return count

def Score(motifs):
    consensus = FindConsensus(motifs)
    score = 0
    for motif in motifs:
        score = score + HammingDist(motif, consensus)
    
    return score

        
def GreedyMotifSearch(Dna,k,t):
    bestScore = math.inf
    bestMotif = []
    for string in Dna:
        bestMotif.append(string[:k])
    
    for i in range(0, len(Dna[0])-k+1):
        Motif = Dna[0][i:i+k]
        newMotif = []
        newMotif.append(Motif)
        for j in range(1,t):
            profile = ProfileMatrix(newMotif)
            probable = ProbableMotif(Dna[j], k, profile )
            newMotif.append(probable)
     
        
        score = Score(newMotif)
        
        if score < bestScore:
            bestScore = score
            bestMotif = newMotif
        
    print(bestMotif, bestScore)
        


Dna = ["CAAGCAGGATTGTGAGGAGATTTCTTACTAGTGTTTCAGCTTTCGCGCAGAAAAATAAAACTGAACGTTTTGTTAGGGGATCGATCGCCAGTTTGGTTTAGTTTGTTCCGAGGCACGTACGCAACACTTACGCCAGGTCCAAGGCTTATGGACCCA",
"TTACAGTACATCTTCTACTATGTTCTTTGGGCCAACTCAGAGGACCGATTAAATTTTCGGTCCAGCACAGAACTTCCAATTTCTTGGTCATAAGGCAGTCTCGCAAAGCCGCAACCGCTCCTTGGATCTACAATCATCTACAAAGGGTGGGCACGA",
"TGCCGCACTATAATCCCACGGGAATTGACGCAAGGAATTTTAAAGGGTGGGAACAGATAGAATTTTTACGTTATGTTTCTCCATGATATTGCCACGGGGCAGAATTAATTAGCGGAACGCCATTGTTTCAGTCCGCCCGTGGTTCCTGACGGTTCG",
"GGAGTGCCATTTTTGTATGGCCAGTTAGGGGATCGGTTACCACTGTATTTAGGTGTAACTCGCCCTCCTTGTCTGTTACTAGACCACTAGCCACGAAGCGCATTGTTCGTCACCCTTTTATCCGACTGTTTTGTGGGGATGACGGCGTCGCGGCAT",
"AAGGTGCATCCACTGTGAATTTCGTAAGCGGAGCGTCTAATTCGCGGAGTGTTCTAGAGGTGTCGACGCTACCATCCAATAGATGCTGTAAACTTATAGGTGGCTGCAACATCTCTTATGCAGATGGTAGGTGAGATTCACCCTTTGTAGTCCCGG",
"TGAGGGGACCGAAACGGATCGCGTTGGACCTACTAGACCATTCCTAGTTCTACCGCTTGGTCTTTAGTCTAGTTGTACATCGCCCACAATCCCGGCCCCCCTCGTCCTTGTAATCACCTTTGCTAAGACAATCGATTAGGGGAAGCTATGCCAACT",
"CAATGATGTCGAACCGGTTTAACTTGCACGTGATCCCAATTACTCGTCAACGTAACTTAACGATACTTCCACGGTCCGCCCGGGTTTGAACACGCAAAGGATGGGTAGCTTAGTAAAAAAGGACGGGACTGTCCTCTGATCACTTTAGTGGATCGT",
"TAAGCGGACCGTTCCTAGGTCGCAACGGATTCAATAATTCTCCTGATCGAATTGCTCCCGGTGAGTGCTCTTCCTCTAGTTCGTTATTAATAAGTAACTAAGGATAGCCGTCGCTCCTTAGACCGTGAGATTGGCACACGTTTAGAACGCCTACAT",
"GTAATTTACACAAGATCGTAAGAGACCCGTCCATGGACACTTAACGTTCCCGATTCATTGTATCCCCACGCCGACGTGTTCCGTGCTTTGTCACGGGCTTCACCTGTTCATAAAATGGCCCGTTCCGAAGCGTTAGTGGACCGGCGTTCAATGTAT",
"CGTCTCATCAATGCTCTACCCGTCCGTTCGGCTGTGAAAAAATGATCTCAGTTGGACAGGTACATGGAATGATCAGTGGAACGCTACAGTCCCAACGGCTCCATTTGTCGTGGAGGCCGTCCGGATTCAAAGCTGTTGATAGAATCATTAGAGAAG",
"AGGACCCCGAGATGTCTCGTCGTGGAACACACGTCACGAGCTCCGTCGGAATCCATTCGCTGAGGGGACCGCGATGCGACTAGTATCTTCTTTGTCCACCACGAGTAGTCGTAGAAATTGGAACAAATGGTGTTCCGAATAGGTATGAGGATGCGC",
"TAGCATCTCTGTCAGTCTGTGAGCAACCAAACCAAGAGTTAGCACTCGGTTCTAAGTGAACGCCCCAAGGACCCTGAAGCACAGGGGTGGTTCGATCCACGAGCTCGCGAATGCCGGCTGGAGTGAGAAGTTTAGACGGGTCACTAAGTGGACCGC",
"GTATGCGGTCCTGTTAATCTTGACGGCATCCGCGCCTCAGCGGATCGGTACACGTCTAAGAGCACGCACTGGCTGAACTCTTTAAGGCGACACGTTATTGGTCTCTACGAGCCTTCTCGCCGGGCGAACGGCTACCCCCGCGAGCCTGAGAGCGTC",
"ATGCCAAATTTCGACCCGGCCAGCTGAGGGGATCGTCGTACCTATCGCGATCTCAGGAGTAGGTACCGACACTTGTAACACAAATTACTAGTTGACAATACCCCCTCAAACCTCCTATTATGCTACTAGCACGTCCCTCGGGACGACGCTGAGCTT",
"GTTACCCCAGTACATGCACCTTACACATCCATCCGGTTGATCGGATCGAAGCCTCCATTATCGCCCTCGACATAAGAATGAGCAACGTCCTGTAAATCAGTGGATCGATCGTTTATTAGGGCCGACCGATCACATACTACGCATGGCCTGCCTGAT",
"AATACTCAAGCGTAAGGATATCTGGAGACGAAGTGTTTACGACAACGCATTCAGAGCGCGTCAGGGGACCGCCTACAGAGAAGGGCTTGAGTATTCAGTTCGCGGCTTGACAACTAGGGCCGCATGTTCCTGGAGTGAAGCGGGTTCCTGTGACAG",
"AGTATCGCAGTAAGACTCCCTGGCTCGGACTGCTGAGGCGATCCATTGGGGATTTAACCATGATTATGTGACTGAGCGGAGCGACAAAGGATCTGTTATAAAGCGGTTAAAGGGGCCCAACAGCTACAGCTTGGGGCGAGGGCCAACGTGTTGCGA",
"CACAAACGTGAGTATTACGGTGGGTCAGAGGAACGACGCAGCGTACAAGCTGTACCCAAGGCTCTCGATGTTACGCGCGCGAACACCTTATCGAGCTCCACTCCGACAAACCTATCCGCTAAACTAAGGTGTATATAACGCAGCGCTGCCTTTTTT",
"TATTTTGTCTTACCTGTGCCTGGTAACGTTATGGCGCTGGGATGAAGGGGCTCCGCCCAACGGAATCACTACCTCGGACCTGACTAAGGGGAACGACTCCAGCTTGTCTTGCCTGTACGCTTTACGCCCACAAAGTAACGGTCGCCACTCACTTAT",
"TGAGGGGATCGACCCTCCGACAGGTGATCCCAACATGTGTGTCAAGACTCTGGGTACTCTTGGAACCCCTCGGCCGCTGCCGCGCACCGACTACAATGTGTCAGAACCAAGAGCGTTGTTGGGCGTTGGTACATGGGAGATGCAGCCGGCCTCTCA",
"AATCCATTGTGCAGGGCCGAGTATTAATCTAAAATGCGCATGGGTCGATTTTGGTAATCCTATTTTATTCTCTTAGCACATGAGCCCTCGCTACGATAAGAGGAGCGCCTTAGGTACATCATGTCGGGTCATTGAAAATCCCCATAGTCCTCCCTG",
"CAGGAGGAGCCACCAGCCCGTGCCCAAACACAAAGGTTAGCGGACCGGGGCAGACGACCACACTTTAATAGCTTCTGCAGAGCTGTGCGGCGGAACGAATCTTTAACTCCCATATCTAAATGCAACTGTATGTTGCCAGTGTAGCTACGGCAGGGG",
"CAGTTCCTGGCTAGAGAGTTCTGATGAGCGGAGCGTGGTGTAGCGTAGACACAGTTTTTCCTGTCCAAGCGACGTCGGCTGCCGACTGCGCTAATTTGCCATTCCCTTCGGGAGCATTGGGTGTTATCTGACGATGGGGGAGCGGGAAGATGGAAT",
"GTTACCCTCTAAACCCAGAAATGAGATGCCTATGAGGTCGGCATACTGCTCTGTCTATTGAAGCGACTATAATATAGGTCATTGATCGCTTTCGTACAGCGGGGAAGCTACAACATATAGGGAACCGTGGTGTTAGCGGATCGGGCTAACCGGGCT",
"ATTAAAATAGTGTGTGTGCTCCCATCTTCGACGACATTTGCCGGACGTGCTTGCCTCATAGCACAGCAGGCCGATATGTTGTTGTCGCCCATTGCCTCAGCGGAACGAGCCCCCGCGAGTCTTCTTTTGCCCGGAACAGAATTGCTTTCTGGGGAT"]

t = len(Dna)
k = int(input("Enter k-mer"))
GreedyMotifSearch(Dna, k, t)
